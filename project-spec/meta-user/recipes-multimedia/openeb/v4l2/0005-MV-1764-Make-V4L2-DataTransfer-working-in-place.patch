From b2f57fabd6cc7bc0315d4732687466cd3e4c4abd Mon Sep 17 00:00:00 2001
From: Christian Dreher <cdreher@prophesee.ai>
Date: Tue, 16 Apr 2024 10:43:54 +0200
Subject: [PATCH 05/13] [MV-1764] Make V4L2 DataTransfer working in-place

V4l2DataTransfer now builds buffers with an allocator working with
the V4L2 buffer pool, and keeps the mapping between std::vectors and
V4L2 buffer indices, allowing to pass buffer between V4L2 device and
DataTransfer BufferPool (and everything over I_EventStream)
---
 .../include/boards/v4l2/v4l2_data_transfer.h  |  52 ++++-
 .../include/boards/v4l2/v4l2_device.h         |   8 +-
 .../src/boards/v4l2/CMakeLists.txt            |   2 +-
 .../src/boards/v4l2/v4l2_board_command.cpp    |   2 +-
 .../src/boards/v4l2/v4l2_data_transfer.cpp    | 187 ++++++++++++++----
 .../src/boards/v4l2/v4l2_device.cpp           |  37 ----
 .../src/boards/v4l2/v4l2_mmap_allocator.cpp   |  86 ++++++++
 7 files changed, 285 insertions(+), 89 deletions(-)
 create mode 100644 hal_psee_plugins/src/boards/v4l2/v4l2_mmap_allocator.cpp

diff --git a/hal_psee_plugins/include/boards/v4l2/v4l2_data_transfer.h b/hal_psee_plugins/include/boards/v4l2/v4l2_data_transfer.h
index 8a2f0440d0..71c4726057 100644
--- a/hal_psee_plugins/include/boards/v4l2/v4l2_data_transfer.h
+++ b/hal_psee_plugins/include/boards/v4l2/v4l2_data_transfer.h
@@ -15,22 +15,62 @@
 #include "metavision/hal/utils/data_transfer.h"
 
 namespace Metavision {
-
-class V4L2DeviceControl;
-class V4l2DeviceUserPtr; // @TODO Replace with a V4l2 Buffer class interface
+using V4l2Buffer         = struct v4l2_buffer;
+using V4l2RequestBuffers = struct v4l2_requestbuffers;
 
 class V4l2DataTransfer : public DataTransfer {
 public:
-    V4l2DataTransfer(std::shared_ptr<V4L2DeviceControl> device, uint32_t raw_event_size_bytes);
+    V4l2DataTransfer(int fd, uint32_t raw_event_size_bytes);
     ~V4l2DataTransfer();
 
 private:
-    std::shared_ptr<V4L2DeviceControl> device_;
-    std::unique_ptr<V4l2DeviceUserPtr> buffers;
+    static constexpr int device_buffer_number = 32;
+    // List of queued buffers to prevent them from going back to the ObjectPool
+    BufferPtr queued_buffers_[device_buffer_number];
+    // The memory type currently in use
+    const enum v4l2_memory memtype_;
+    const int fd_;
+
+    V4l2RequestBuffers request_buffers(uint32_t nb_buffers);
 
     void start_impl(BufferPtr buffer) override final;
     void run_impl() override final;
     void stop_impl() override final;
+
+    class V4l2Allocator : public Allocator::Impl {
+        size_t buffer_size_;
+
+    protected:
+        V4l2Allocator(int videodev_fd);
+        size_t buffer_size() {
+            return buffer_size_;
+        }
+
+    public:
+        size_t max_size(size_t data_size) const noexcept override {
+            return buffer_size_ / data_size;
+        }
+        // Get a descriptor usable with V4L2 API from a data pointer
+        virtual void fill_v4l2_buffer(void *, V4l2Buffer &) const = 0;
+    };
+
+    class V4l2MmapAllocator : public V4l2Allocator {
+        void *allocate(size_t n, size_t data_size) override;
+        void deallocate(void *p, size_t n, size_t data_size) override;
+        void fill_v4l2_buffer(void *, V4l2Buffer &) const override;
+
+    public:
+        V4l2MmapAllocator(int fd);
+        ~V4l2MmapAllocator() override;
+
+    private:
+        V4l2RequestBuffers request_buffers(uint32_t nb_buffers);
+        // The mapping between buffer indices and their memory mapping
+        std::vector<void *> mapping_;
+        size_t buffer_size_;
+        const int fd_;
+    };
+    void fill_v4l2_buffer(BufferPtr &, V4l2Buffer &) const;
 };
 
 } // namespace Metavision
diff --git a/hal_psee_plugins/include/boards/v4l2/v4l2_device.h b/hal_psee_plugins/include/boards/v4l2/v4l2_device.h
index 8162c01328..d4e1604746 100644
--- a/hal_psee_plugins/include/boards/v4l2/v4l2_device.h
+++ b/hal_psee_plugins/include/boards/v4l2/v4l2_device.h
@@ -26,9 +26,7 @@ namespace Metavision {
 
 void raise_error(const std::string &str);
 
-using V4l2Capability     = struct v4l2_capability;
-using V4l2Buffer         = struct v4l2_buffer;
-using V4l2RequestBuffers = struct v4l2_requestbuffers;
+using V4l2Capability = struct v4l2_capability;
 
 class V4L2DeviceControl : public DeviceControl {
     V4l2Capability cap_;
@@ -56,10 +54,6 @@ public:
 
     V4l2Capability get_capability() const;
 
-    V4l2RequestBuffers request_buffers(v4l2_memory memory, uint32_t nb_buffers);
-    V4l2Buffer query_buffer(v4l2_memory memory_type, uint32_t buf_index);
-    int queue_buffer(V4l2Buffer &buffer);
-    int dequeue_buffer(V4l2Buffer *buffer);
     int get_fd() const {
         return fd_;
     }
diff --git a/hal_psee_plugins/src/boards/v4l2/CMakeLists.txt b/hal_psee_plugins/src/boards/v4l2/CMakeLists.txt
index 5897f4855e..2c32c82445 100644
--- a/hal_psee_plugins/src/boards/v4l2/CMakeLists.txt
+++ b/hal_psee_plugins/src/boards/v4l2/CMakeLists.txt
@@ -20,8 +20,8 @@ target_sources(metavision_hal_v4l2_protocol_obj PRIVATE
 target_sources(metavision_psee_hw_layer_obj PRIVATE
     ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_camera_discovery.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_data_transfer.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_mmap_allocator.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_device.cpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_user_ptr_data.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_board_command.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/v4l2_hardware_identification.cpp
 )
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_board_command.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_board_command.cpp
index c1506114da..a50568ceff 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_board_command.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_board_command.cpp
@@ -152,7 +152,7 @@ std::unique_ptr<DataTransfer> V4L2BoardCommand::build_data_transfer(uint32_t raw
     // extract the /dev/videoX associated entity, and populate the DataTransfer with it.
     // Right now, we'll just hard code it to /dev/video0 ¯\_(ツ)_/¯
     // more details in: https://github.com/gjasny/v4l-utils/blob/master/utils/media-ctl/media-ctl.c#L526
-    return std::make_unique<V4l2DataTransfer>(device_, raw_event_size_bytes);
+    return std::make_unique<V4l2DataTransfer>(device_->get_fd(), raw_event_size_bytes);
 }
 
 } // namespace Metavision
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_data_transfer.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_data_transfer.cpp
index 58168c0a59..ff816d27e0 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_data_transfer.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_data_transfer.cpp
@@ -9,69 +9,182 @@
  * See the License for the specific language governing permissions and limitations under the License.                 *
  **********************************************************************************************************************/
 
-#include <thread>
-#include <chrono>
+#include <system_error>
+
+#include <unistd.h>
+#include <poll.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <linux/videodev2.h>
 
-#include "boards/v4l2/v4l2_device.h"
 #include "boards/v4l2/v4l2_data_transfer.h"
-#include "boards/v4l2/v4l2_user_ptr_data.h"
 
 #include "metavision/hal/utils/hal_log.h"
 
 using namespace Metavision;
+using Allocator = DataTransfer::Allocator;
 
-constexpr bool allow_buffer_drop           = true;
-constexpr size_t data_stream_buffer_number = 32;
-constexpr size_t data_stream_buffer_size   = 1 * 1024;
+constexpr bool allow_buffer_drop = true;
 
-constexpr size_t device_buffer_size   = 8 * 1024 * 1024;
-constexpr size_t device_buffer_number = 3;
+constexpr size_t device_buffer_preload_number = 4;
 
-V4l2DataTransfer::V4l2DataTransfer(std::shared_ptr<V4L2DeviceControl> device, uint32_t raw_event_size_bytes) :
+V4l2DataTransfer::V4l2DataTransfer(int fd, uint32_t raw_event_size_bytes) :
     DataTransfer(raw_event_size_bytes,
-                 DataTransfer::BufferPool::make_bounded(data_stream_buffer_number, data_stream_buffer_size),
+                 // To create device_buffer_number std::vectors with a V4L2 MMAP allocator
+                 DataTransfer::BufferPool::make_bounded(device_buffer_number,
+                                                        Allocator(Allocator::ImplPtr(new V4l2MmapAllocator(fd)))),
                  allow_buffer_drop),
-    device_(device) {}
+    memtype_(V4L2_MEMORY_MMAP),
+    fd_(dup(fd)) {
+    auto res = request_buffers(device_buffer_number);
+    if (res.count != device_buffer_number)
+        throw std::system_error(ENOMEM, std::generic_category(), "Unexepected amount of V4L2 buffers allocated");
+}
+
+V4l2DataTransfer::~V4l2DataTransfer() {
+    // Release the previously acquired buffers
+    request_buffers(0);
+    // and release this file handler
+    close(fd_);
+}
+
+V4l2RequestBuffers V4l2DataTransfer::request_buffers(uint32_t nb_buffers) {
+    V4l2RequestBuffers req{0};
+    req.count  = nb_buffers;
+    req.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    req.memory = memtype_;
 
-V4l2DataTransfer::~V4l2DataTransfer() {}
+    if (-1 == ioctl(fd_, VIDIOC_REQBUFS, &req)) {
+        throw std::system_error(errno, std::generic_category(), "VIDIOC_REQBUFS failed");
+    }
 
-void V4l2DataTransfer::start_impl(BufferPtr) {
+    return req;
+}
+
+void V4l2DataTransfer::start_impl(BufferPtr input_buff) {
     MV_HAL_LOG_INFO() << "V4l2DataTransfer - start_impl() ";
 
-    buffers = std::make_unique<V4l2DeviceUserPtr>(device_, "/dev/dma_heap", "linux,cma", device_buffer_size,
-                                                  device_buffer_number);
+    V4l2Buffer buffer = {.index = 0, .type = V4L2_BUF_TYPE_VIDEO_CAPTURE, .memory = memtype_};
+
+    fill_v4l2_buffer(input_buff, buffer);
 
-    MV_HAL_LOG_TRACE() << " Nb buffers pre allocated: " << buffers->get_nb_buffers() << std::endl;
-    for (unsigned int i = 0; i < buffers->get_nb_buffers(); ++i) {
-        buffers->release_buffer(i);
+    if (ioctl(fd_, VIDIOC_QBUF, &buffer) < 0) {
+        throw std::system_error(errno, std::generic_category(), "VIDIOC_QBUF failed");
+    }
+    queued_buffers_[buffer.index] = std::move(input_buff);
+
+    // DMA usually need 2 buffers to run, to be able to quickly switch from one transfer to the next
+    // The way datatransfer is built, run_impl sequentially dequeue a buffer, pass it to EventStream, query another
+    // from the buffer pool, queue it, then dequeue the next buffer.
+    // If all buffer are queued it becomes impossible to dequeue 2 of them to process them in parallel.
+    // Since 2 queued buffers are usually enough, and we have 32 of them, queuing 4 should avoid issues with hardware
+    // expecting more, while allowing 28 buffers in parallel (or in a 28-stage pipeline) in the app.
+    for (unsigned int i = 1; i < device_buffer_preload_number; ++i) {
+        input_buff = get_buffer();
+        // Using DMABUF, the allocator handles the pool of buffers through file descriptors, we need to choose a free
+        // index to queue a buffer.
+        // On the other hand, with MMAP, the pool is handled through indices, and fill_v4l2_buffer will fix the index
+        // in the V4l2Buffer descriptor.
+        buffer.index = i;
+        fill_v4l2_buffer(input_buff, buffer);
+
+        if (ioctl(fd_, VIDIOC_QBUF, &buffer) < 0) {
+            throw std::system_error(errno, std::generic_category(), "VIDIOC_QBUF failed");
+        }
+        queued_buffers_[buffer.index] = std::move(input_buff);
     }
 }
 
 void V4l2DataTransfer::run_impl() {
     MV_HAL_LOG_INFO() << "V4l2DataTransfer - run_impl() ";
+    struct pollfd fds[1];
 
-    while (!should_stop()) {
-        // Grab a MIPI frame
-        int idx                  = buffers->poll_buffer();
-        auto [data, data_length] = buffers->get_buffer_desc(idx);
+    fds[0].fd      = fd_;
+    fds[0].events  = POLLIN;
+    fds[0].revents = 0;
 
-        MV_HAL_LOG_TRACE() << "Grabed buffer " << idx << "from: " << std::hex << data << " of: " << std::dec
-                           << data_length << " Bytes.";
-
-        // Get transfer buffer from the pool and transfer the data
-        auto local_buff = get_buffer();
-        local_buff->resize(data_length);
-        std::memcpy(local_buff->data(), data, data_length);
-        transfer_data(local_buff);
-
-        // Reset the buffer data
-        memset(data, 0, data_length);
-
-        buffers->release_buffer(idx);
+    while (!should_stop()) {
+        V4l2Buffer buf{0};
+
+        if (poll(fds, 1, -1) < 0) {
+            MV_HAL_LOG_ERROR() << "V4l2DataTransfer: poll failed" << strerror(errno);
+            break;
+        }
+
+        if (fds[0].revents & POLLERR) {
+            // When stopping, STREAMOFF ioctl will return all buffers and epoll will signal an error, since there is no
+            // queued buffer anymore. This will usually trig faster than calling DataTransfer::stop, and should_stop()
+            // will still return false, even though I_EventStream is stopping.
+            // Stop polling and wait for DataTransfer to call stop_impl before cleaning
+            MV_HAL_LOG_TRACE() << "V4l2DataTransfer: poll returned" << std::hex << fds[0].revents << std::dec;
+            break;
+        }
+
+        buf.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+        buf.memory = memtype_;
+        if (ioctl(fd_, VIDIOC_DQBUF, &buf) < 0) {
+            MV_HAL_LOG_ERROR() << "V4l2DataTransfer: DQBUF failed" << strerror(errno);
+            break;
+        }
+
+        MV_HAL_LOG_DEBUG() << "Grabbed buffer" << buf.index << "of:" << buf.bytesused << "Bytes.";
+
+        // Get the vector corresponding to this buffer and transfer the data
+        queued_buffers_[buf.index]->resize(buf.bytesused);
+
+        auto [next, dropped] = transfer_data(queued_buffers_[buf.index]);
+        // Release the buffer to DataTransfer BufferPool
+        queued_buffers_[buf.index].reset();
+
+        // buf is filled with the info of the dequeued buffer
+        // update it with next information
+        fill_v4l2_buffer(next, buf);
+
+        // Queue the next buffer to keep the device running
+        if (ioctl(fd_, VIDIOC_QBUF, &buf) < 0) {
+            throw std::system_error(errno, std::generic_category(), "VIDIOC_QBUF failed");
+        }
+        queued_buffers_[buf.index] = std::move(next);
     }
 }
 
 void V4l2DataTransfer::stop_impl() {
     MV_HAL_LOG_TRACE() << "V4l2DataTransfer - stop_impl() ";
-    buffers.reset();
+    // Here we trust that I_EventStream has also stopped V4L2 Device Control, which does STREAMOFF
+    // and return every buffer, allowing to release buffers here
+    for (size_t i = 0; i < device_buffer_number; i++)
+        queued_buffers_[i].reset();
+}
+
+// Fills the V4L2 descriptor with the buffer info. This information depends on the Allocator implementation
+// For instance in MMAP the buffer is mapped to an index of the device
+// But on DMABUF, the buffer is mapped to a standalone file descriptor
+// fill_v4l2_buffer requires v4l2_buf to be filled with a non-queued index of the V4L2 device, but may
+// rewrite it, in case there is a fixed mapping between buffers and indices, as in MMAP use case
+// The caller shall not assume that v4l2_buf.index is unchanged after a call to fill_v4l2_buffer
+void V4l2DataTransfer::fill_v4l2_buffer(BufferPtr &buf, V4l2Buffer &v4l2_buf) const {
+    // Since we inherit from DataTransfer, which requires a BufferPool, we can't query the actual buffer
+    // size before building the BufferPool, and it is built with empty buffers. This ensure the vectors
+    // are allocated before trying to map their allocations with the V4L2 buffers
+    if (!buf->data())
+        buf->reserve(buf->get_allocator().max_size());
+
+    // The std::vectors in BufferPool are built with a V4l2Allocator, which can do this work
+    V4l2Allocator *alloc = dynamic_cast<V4l2Allocator *>(buf->get_allocator().get_impl().get());
+    if (!alloc)
+        throw std::system_error(EPERM, std::generic_category(), "Impl is expected to be V4l2Allocator");
+    alloc->fill_v4l2_buffer(buf->data(), v4l2_buf);
+}
+
+V4l2DataTransfer::V4l2Allocator::V4l2Allocator(int videodev_fd) {
+    struct v4l2_format format {
+        .type = V4L2_BUF_TYPE_VIDEO_CAPTURE
+    };
+
+    // Technically, the format is not locked yet, it will be locked when V4l2DataTransfer constructor does
+    // request_buffers, but we need to build the BufferPool with an Allocator first
+    if (ioctl(videodev_fd, VIDIOC_G_FMT, &format))
+        throw std::system_error(errno, std::generic_category(), "VIDIOC_G_FMT failed");
+
+    buffer_size_ = format.fmt.pix.sizeimage;
 }
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_device.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_device.cpp
index 98e989b225..4013574fc0 100644
--- a/hal_psee_plugins/src/boards/v4l2/v4l2_device.cpp
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_device.cpp
@@ -66,47 +66,10 @@ V4L2DeviceControl::V4L2DeviceControl(const std::string &dev_name) {
         raise_error("VIDIOC_S_FMT failed");
 }
 
-V4l2RequestBuffers V4L2DeviceControl::request_buffers(v4l2_memory memory, uint32_t nb_buffers) {
-    V4l2RequestBuffers req{0};
-    req.count  = nb_buffers;
-    req.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-    req.memory = memory;
-
-    if (-1 == ioctl(fd_, VIDIOC_REQBUFS, &req)) {
-        raise_error("VIDIOC_QUERYBUF failed");
-    }
-
-    return req;
-}
-
-V4l2Buffer V4L2DeviceControl::query_buffer(v4l2_memory memory_type, uint32_t buf_index) {
-    V4l2Buffer buf{0};
-    buf.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;
-    buf.memory = memory_type;
-    buf.index  = buf_index;
-
-    if (ioctl(fd_, VIDIOC_QUERYBUF, &buf))
-        raise_error("VIDIOC_QUERYBUF failed");
-
-    return buf;
-}
-
 V4l2Capability V4L2DeviceControl::get_capability() const {
     return cap_;
 }
 
-int V4L2DeviceControl::queue_buffer(V4l2Buffer &buffer) {
-    auto ioctl_res = ioctl(fd_, VIDIOC_QBUF, &buffer);
-    if (ioctl_res) {
-        raise_error("VIDIOC_QBUF failed");
-    }
-    return ioctl_res;
-}
-
-int V4L2DeviceControl::dequeue_buffer(V4l2Buffer *buffer) {
-    return ioctl(fd_, VIDIOC_DQBUF, buffer);
-}
-
 void V4L2DeviceControl::start() {
     enum v4l2_buf_type type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
     if (ioctl(fd_, VIDIOC_STREAMON, &type))
diff --git a/hal_psee_plugins/src/boards/v4l2/v4l2_mmap_allocator.cpp b/hal_psee_plugins/src/boards/v4l2/v4l2_mmap_allocator.cpp
new file mode 100644
index 0000000000..617c62dbd7
--- /dev/null
+++ b/hal_psee_plugins/src/boards/v4l2/v4l2_mmap_allocator.cpp
@@ -0,0 +1,86 @@
+/**********************************************************************************************************************
+ * Copyright (c) Prophesee S.A.                                                                                       *
+ *                                                                                                                    *
+ * Licensed under the Apache License, Version 2.0 (the "License");                                                    *
+ * you may not use this file except in compliance with the License.                                                   *
+ * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0                                 *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed   *
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                      *
+ * See the License for the specific language governing permissions and limitations under the License.                 *
+ **********************************************************************************************************************/
+
+#include <system_error>
+
+#include <unistd.h>
+#include <poll.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <linux/videodev2.h>
+
+#include "boards/v4l2/v4l2_data_transfer.h"
+
+#include "metavision/hal/utils/hal_log.h"
+
+using namespace Metavision;
+using Allocator = DataTransfer::Allocator;
+
+V4l2DataTransfer::V4l2MmapAllocator::V4l2MmapAllocator(int fd) :
+    V4l2Allocator(fd), mapping_(device_buffer_number, nullptr), fd_(dup(fd)) {}
+
+V4l2DataTransfer::V4l2MmapAllocator::~V4l2MmapAllocator() {
+    close(fd_);
+}
+
+void *V4l2DataTransfer::V4l2MmapAllocator::allocate(size_t n, size_t datasize) {
+    void *vaddr;
+    V4l2Buffer buffer;
+    int buffer_index;
+
+    if (n > max_size(datasize))
+        throw std::length_error("Trying to expand allocation beyond V4L2 buffer length");
+
+    // Look for a free buffer
+    for (buffer_index = 0; buffer_index < device_buffer_number; buffer_index++)
+        if (mapping_[buffer_index] == nullptr)
+            break;
+    if (buffer_index >= device_buffer_number)
+        throw std::system_error(ENOMEM, std::generic_category(), "No more available V4L2 buffer");
+
+    // Query buffer information
+    memset(&buffer, 0, sizeof(buffer));
+    buffer.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+    buffer.memory = V4L2_MEMORY_MMAP;
+    buffer.index  = buffer_index;
+
+    if (ioctl(fd_, VIDIOC_QUERYBUF, &buffer) < 0)
+        throw std::system_error(errno, std::generic_category(), "Could not query V4L2 buffer");
+
+    // Map it in the program memory
+    vaddr = mmap(NULL, buffer.length, PROT_READ | PROT_WRITE, MAP_SHARED, fd_, buffer.m.offset);
+    if (vaddr == MAP_FAILED)
+        throw std::system_error(errno, std::generic_category(), "Could not mmap V4L2 buffer");
+
+    // Save the mapping, implicitely making the buffer used.
+    mapping_[buffer_index] = vaddr;
+
+    return mapping_[buffer_index];
+}
+
+void V4l2DataTransfer::V4l2MmapAllocator::deallocate(void *p, size_t n, size_t data_size) {
+    // Mark the buffer as unused
+    for (int i = 0; i < device_buffer_number; i++)
+        if (mapping_[i] == p)
+            mapping_[i] = nullptr;
+    // and remove its mapping in userspace
+    munmap((void *)p, buffer_size());
+}
+
+void V4l2DataTransfer::V4l2MmapAllocator::fill_v4l2_buffer(void *vaddr, V4l2Buffer &buf) const {
+    // There are at most 32 buffers, a std::map looks overkill for index search
+    for (int i = 0; i < device_buffer_number; i++)
+        if (mapping_[i] == vaddr) {
+            buf.index = i;
+            return;
+        }
+    throw std::system_error(EINVAL, std::generic_category(), "Requested index of a non-V4L2 buffer");
+}
-- 
2.39.2

